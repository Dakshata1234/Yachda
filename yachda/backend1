# app.py
import os
import pickle
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
from keras.preprocessing import image
from keras.models import load_model

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Load your trained model (replace 'model.pkl' with your model file)
model = None
with open('model.pkl', 'rb') as model_file:
    model = pickle.load(model_file)

# Define your class labels (modify these based on your model's output)
class_labels = ['Healthy', 'Disease1', 'Disease2', 'Disease3']  # Update with actual class names

# Function to preprocess image for prediction
def prepare_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))  # Adjust target size to match your model
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0  # Normalize the image if required
    return img_array

# Route for predicting the plant disease
@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return jsonify({"error": "No image file provided"}), 400

    file = request.files['image']
    
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    try:
        # Save the uploaded image temporarily
        img_path = os.path.join('uploads', file.filename)
        file.save(img_path)

        # Prepare image for prediction
        prepared_image = prepare_image(img_path)

        # Make predictions
        predictions = model.predict(prepared_image)
        predicted_class_index = np.argmax(predictions[0])
        predicted_class = class_labels[predicted_class_index]

        # Clean up: remove the uploaded image
        os.remove(img_path)

        # Return predictions
        return jsonify({
            "predicted_class": predicted_class,
            "prediction_probabilities": predictions.tolist()[0]
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # Ensure uploads directory exists
    os.makedirs('uploads', exist_ok=True)
    
    app.run(debug=True)
